<?xml version="1.0"?>
<doc>
<assembly>
<name>
flxUtilities
</name>
</assembly>
<members>
<member name="T:FLEXYGO.My.Resources.Resources">
<summary>
  Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
</summary>
</member>
<member name="P:FLEXYGO.My.Resources.Resources.ResourceManager">
<summary>
  Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
</summary>
</member>
<member name="P:FLEXYGO.My.Resources.Resources.Culture">
<summary>
  Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
  búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
</summary>
</member>
<member name="T:FLEXYGO.Utilities.General.BaseCollection">
 <summary>
 Class BaseCollection.
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.General.BaseCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Utilities.General.BaseCollection"/> class.
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.General.BaseCollection.#ctor(FLEXYGO.Utilities.General.BaseCollection)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Utilities.General.BaseCollection"/> class.
 </summary>
 <param name="d">The d.</param>
</member>
<member name="P:FLEXYGO.Utilities.General.BaseCollection.ToJSon">
 <summary>
 Serializes object to JSon.
 </summary>
 <value>To JSon.</value>
</member>
<member name="T:FLEXYGO.Utilities.General.ClassCollection`1">
 <summary>
 Class ClassCollection.
 </summary>
 <typeparam name="T"></typeparam>
</member>
<member name="M:FLEXYGO.Utilities.General.ClassCollection`1.#ctor">
 <summary>
 Initializes a new instance of the ClassCollection class.
 </summary>
</member>
<member name="P:FLEXYGO.Utilities.General.ClassCollection`1.ToJSon">
 <summary>
 Serializes object to JSon.
 </summary>
 <value>To JSon.</value>
</member>
<member name="T:FLEXYGO.Utilities.General.SerializableDictionary`1">
 <summary>
 Class SerializableDictionary.
 </summary>
 <typeparam name="TValue">The type of the t value.</typeparam>
 <seealso cref="T:System.Collections.Generic.Dictionary`2" />
 <seealso cref="T:System.Xml.Serialization.IXmlSerializable" />
</member>
<member name="M:FLEXYGO.Utilities.General.SerializableDictionary`1.#ctor(System.StringComparer)">
 <summary>
 Initializes a new instance of the <see cref="T:SerializableDictionary"/> class.
 </summary>
 <param name="comparer">The comparer.</param>
</member>
<member name="M:FLEXYGO.Utilities.General.SerializableDictionary`1.GetSchema">
 <summary>
 This method is reserved and should not be used. When implementing the <see langword="IXmlSerializable" /> interface, you should return <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
 </summary>
 <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.SerializableDictionary`1.ReadXml(System.Xml.XmlReader)">
 <summary>
 Generates an object from its XML representation.
 </summary>
 <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
</member>
<member name="M:FLEXYGO.Utilities.General.SerializableDictionary`1.WriteXml(System.Xml.XmlWriter)">
 <summary>
 Converts an object into its XML representation.
 </summary>
 <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
</member>
<member name="T:FLEXYGO.Utilities.General.KeyValuePairs">
 <summary>
 Class KeyValuePairs.
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.General.KeyValuePairs._Key">
 <summary>
 The key
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.General.KeyValuePairs._Value">
 <summary>
 The value
 </summary>
</member>
<member name="P:FLEXYGO.Utilities.General.KeyValuePairs.Key">
 <summary>
 Gets or sets the key.
 </summary>
 <value>The key.</value>
</member>
<member name="P:FLEXYGO.Utilities.General.KeyValuePairs.Value">
 <summary>
 Gets or sets the value.
 </summary>
 <value>The value.</value>
</member>
<member name="M:FLEXYGO.Utilities.General.KeyValuePairs.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Utilities.General.KeyValuePairs"/> class.
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.General.KeyValuePairs.#ctor(System.String,System.Object)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Utilities.General.KeyValuePairs"/> class.
 </summary>
 <param name="aKey">a key.</param>
 <param name="aValue">a value.</param>
</member>
<member name="T:FLEXYGO.Utilities.General.LDAP">
 <summary>
 Checks if user is Authenticated in LDAP
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.General.LDAP.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Utilities.General.LDAP"/> class.
 </summary>
 <param name="aPath">A path.</param>
</member>
<member name="M:FLEXYGO.Utilities.General.LDAP.IsAuthenticated(System.String,System.String)">
 <summary>
 Determines whether the specified user is authenticated.
 </summary>
 <param name="aUser">A user.</param>
 <param name="aPwd">A password.</param>
 <returns><c>true</c> if the specified a user is authenticated; otherwise, <c>false</c>.</returns>
</member>
<member name="T:FLEXYGO.Utilities.General.URL">
 <summary>
 Class URL.
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.General.URL.GeObjecttUrlByType(FLEXYGO.Utilities.General.URL.PageType,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Generate an object url by page type
 </summary>
 <param name="PageType">Page Type for redirect</param>
 <param name="ObjectName">The object or collection name</param>
 <param name="ObjectWhere">Object where to filter object (empty for insert)</param>
 <param name="Defaults">JSON Object width default values</param>
</member>
<member name="M:FLEXYGO.Utilities.General.URL.GeObjecttUrlByName(System.String,System.String,System.String,System.String)">
 <summary>
 Generate an object url by page name
 </summary>
 <param name="PageName">Page Name for redirect</param>
 <param name="ObjectName">The object or collection name</param>
 <param name="ObjectWhere">Object where to filter object (empty for insert)</param>
 <param name="Defaults">JSON Object width default values</param>
</member>
<member name="T:FLEXYGO.Utilities.General.Util">
 <summary>
 Class Util is a Shared Utility class with general purpose utilities
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.SafeReplace(System.String,System.String,System.String,System.Boolean)">
 <summary>
 String replace with exact match.
 </summary>
 <param name="input">The input string.</param>
 <param name="find">The string to find.</param>
 <param name="replace">The replace string.</param>
 <param name="matchWholeWord">if set to <c>true</c> [match whole word].</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.LogError(System.String,System.String)">
 <summary>
 Add msg to windows event log.
 </summary>
 <param name="msg">The message </param>
 <param name="source">Event log source</param>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.LogWarning(System.String,System.String)">
 <summary>
 Add msg to windows event log.
 </summary>
 <param name="msg">The message </param>
 <param name="source">Event log source</param>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.LogInformation(System.String,System.String)">
 <summary>
 Add msg to windows event log.
 </summary>
 <param name="msg">The message </param>
 <param name="source">Event log source</param>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.LogEvent(System.String,System.Diagnostics.EventLogEntryType,System.String)">
 <summary>
 Add msg to windows event log.
 </summary>
 <param name="msg">The message </param>
 <param name="type">Event log type</param>
 <param name="source">Event log source</param>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.RandomNumber">
 <summary>
 Generates a Random Number.
 </summary>
 <returns>System.Int32.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.ParseString(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Boolean)">
 <summary>
 Parses a string based on a collection.
 </summary>
 <param name="str">The string.</param>
 <param name="col">The colllection.</param>
 <param name="onlyIfNotBlank">if set to <c>true</c> [only if not blank].</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.ReplaceStr(System.String,System.String,System.String)">
 <summary>
 Replaces the strings oldvalue with the new value.
 </summary>
 <param name="str">The string.</param>
 <param name="oldValue">The old value.</param>
 <param name="newValue">The new value.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.FormatedReplace(System.String,System.String,System.Object,System.Type)">
 <summary>
 Performs replace formating string key|FormatType:Format.
 Dates: key|Date:dd/MM/yy
 Boolean: Key|bool:Yes,No
 Decimal: Key|decimal:2
 </summary>
 <param name="str">The string.</param>
 <param name="marker">The marker to parse.</param>
 <param name="newValue">The new value.</param>
 <param name="type">The desdired type of the value, to replace it using invariant culture format.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.KeyValuePairsToCollection(FLEXYGO.Utilities.General.KeyValuePairs[])">
 <summary>
 Convert a array of keyvalue pairs into a base collection
 </summary>
 <param name="arr">Key Value Pairs array</param>
 <returns>base collection</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.IsBlank(System.Object)">
 <summary>
 Determines whether the specified a value is blank null or nothing.
 </summary>
 <param name="aValue">A value.</param>
 <returns><c>true</c> if the specified a value is blank; otherwise, <c>false</c>.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.ObjectToStr(System.Object)">
 <summary>
 Converts Objects to the corresponding string based on TypeCode.
 </summary>
 <param name="aValue">A value.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.StrToObject(System.String,System.String)">
 <summary>
 Converts a String to an object object based on a Type passed as a String.
 </summary>
 <param name="atype">A Type as string.</param>
 <param name="aValue">A value.</param>
 <returns>System.Object.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.StrToObject(System.Type,System.String)">
 <summary>
 Converts a String to an object object based on a Type .
 </summary>
 <param name="atype">A Type as string.</param>
 <param name="aValue">A value.</param>
 <returns>System.Object.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.StrToObject(System.TypeCode,System.String)">
 <summary>
 Converts a String to an object object based on a TypeCode .
 </summary>
 <param name="atype">A Type as string.</param>
 <param name="aValue">A value.</param>
 <returns>System.Object.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.DirCopy(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
 <summary>
 Copy directory contents from Origin to destination.
 </summary>
 <param name="aDirOrg">A dir org.</param>
 <param name="aDirDst">A dir DST.</param>
 <exception cref="T:System.Exception">
 DirCopy - Error. Origin does not exist. ( + aDirOrg.FullName + )
 or
 DirCopy - Error.  + e.Message
 </exception>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.StrToBool(System.String)">
 <summary>
 Converts Strings with the "true", "verdadero", "on", "1", "-1" values into a bool.
 </summary>
 <param name="aStr">A string.</param>
 <returns><c>true</c> if is boolean string, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.GetHtmlFromXML(System.String,System.Xml.Xsl.XsltArgumentList,System.String)">
 <summary>
 Gets HTML text from XML and XSL Transformation file.
 </summary>
 <param name="xsltPath">The XSLT file path.</param>
 <param name="arguments">The arguments list.</param>
 <param name="xml">The XML content.</param>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">Error Generating HTML from xml</exception>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.GetXMLFromUrl(System.String)">
 <summary>
 Gets the XML from a given URL.
 </summary>
 <param name="xmlUrl">The XML URL.</param>
 <returns>XmlDocument.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.ReadInnerExceptions(System.Exception)">
 <summary>
 Reads the inner exceptions.
 </summary>
 <param name="ex">The ex.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.Util.DataSetToExcel(System.String,System.Data.DataSet)">
 <summary>
 DataSetToExcel
 </summary>
 <param name="Path">Path Excel.</param>
 <param name="ds">Excel DataSet.</param>
 <returns>Boolean.</returns>
</member>
<member name="T:FLEXYGO.Utilities.General.StringEnum">
 <summary>
 Helper class for working with 'extended' enums using <see cref="T:FLEXYGO.Utilities.General.StringValueAttribute"/> attributes.
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.#ctor(System.Type)">
 <summary>
 Creates a new <see cref="T:FLEXYGO.Utilities.General.StringEnum"/> instance.
 </summary>
 <param name="enumType">Enum type.</param>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.GetStringValue(System.String)">
 <summary>
 Gets the string value associated with the given enum value.
 </summary>
 <param name="valueName">Name of the enum value.</param>
 <returns>String Value</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.GetStringValues">
 <summary>
 Gets the string values associated with the enum.
 </summary>
 <returns>String value array</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.GetListValues">
 <summary>
 Gets the values as a 'bindable' list data source.
 </summary>
 <returns>IList for data binding</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.IsStringDefined(System.String)">
 <summary>
 Return the existence of the given string value within the enum.
 </summary>
 <param name="stringValue">String value.</param>
 <returns>Existence of the string value</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.IsStringDefined(System.String,System.Boolean)">
 <summary>
 Return the existence of the given string value within the enum.
 </summary>
 <param name="stringValue">String value.</param>
 <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
 <returns>Existence of the string value</returns>
</member>
<member name="P:FLEXYGO.Utilities.General.StringEnum.EnumType">
 <summary>
 Gets the underlying enum type for this instance.
 </summary>
 <value></value>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.GetStringValue(System.Enum)">
 <summary>
 Gets a string value for a particular enum value.
 </summary>
 <param name="value">Value.</param>
 <returns>String Value associated via a <see cref="T:FLEXYGO.Utilities.General.StringValueAttribute"/> attribute, or null if not found.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.Parse(System.Type,System.String)">
 <summary>
 Parses the supplied enum and string value to find an associated enum value (case sensitive).
 </summary>
 <param name="type">Type.</param>
 <param name="stringValue">String value.</param>
 <returns>Enum value associated with the string value, or null if not found.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.Parse(System.Type,System.String,System.Boolean)">
 <summary>
 Parses the supplied enum and string value to find an associated enum value.
 </summary>
 <param name="type">Type.</param>
 <param name="stringValue">String value.</param>
 <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
 <returns>Enum value associated with the string value, or null if not found.</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.IsStringDefined(System.Type,System.String)">
 <summary>
 Return the existence of the given string value within the enum.
 </summary>
 <param name="stringValue">String value.</param>
 <param name="enumType">Type of enum</param>
 <returns>Existence of the string value</returns>
</member>
<member name="M:FLEXYGO.Utilities.General.StringEnum.IsStringDefined(System.Type,System.String,System.Boolean)">
 <summary>
 Return the existence of the given string value within the enum.
 </summary>
 <param name="stringValue">String value.</param>
 <param name="enumType">Type of enum</param>
 <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
 <returns>Existence of the string value</returns>
</member>
<member name="T:FLEXYGO.Utilities.General.StringValueAttribute">
 <summary>
 Simple attribute class for storing String Values
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.General.StringValueAttribute.#ctor(System.String)">
 <summary>
 Creates a new <see cref="T:FLEXYGO.Utilities.General.StringValueAttribute"/> instance.
 </summary>
 <param name="value">Value.</param>
</member>
<member name="P:FLEXYGO.Utilities.General.StringValueAttribute.Value">
 <summary>
 Gets the value.
 </summary>
 <value></value>
</member>
<member name="T:FLEXYGO.Utilities.SQL.SQLUtilities">
 <summary>
 Class SQLUtilities Has several utilities for building SQL sentences
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.ConvertToSQLDate(System.Object)">
 <summary>
 Converts a Date Object to a SQL date.
 </summary>
 <param name="aDate">A date.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.ParseSQLValue(System.Object,System.String,System.Boolean)">
 <summary>
 Converts a .Net Object to a SQL object.
 </summary>
 <param name="val">Value to convert.</param>
 <param name="type">.net type</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.ArrayToDatatable(System.Object[])">
 <summary>
 Converts an object array into a datatable
 </summary>
 <param name="arr">The array to convert</param>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.GenerateStreamFromString(System.String)">
 <summary>
 Generate a stream from text string
 </summary>
 <param name="s">The string.</param>
 <returns>System.IO.Stream</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.DataTasetToList(System.Data.DataSet,System.Object)">
 <summary>
  Converts a DataSet Object to a JSON Serializable List.
 </summary>
 <param name="ds">A DataSet</param>
 <returns>List(Of Dictionary(Of String, Object)</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.DataTableToList(System.Data.DataTable,System.Object)">
 <summary>
  Converts a DataTable Object to a JSON Serializable List.
 </summary>
 <param name="dt">A DataTable</param>
 <returns>List(Of Dictionary(Of String, Object)</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.DataRowToList(System.Data.DataRow,System.Object)">
 <summary>
  Converts a DataRow Object to a JSON Serializable List.
 </summary>
 <param name="dr">A DataRow</param>
 <returns>BaseCollection</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.DataTableToTypedList``1(System.Data.DataTable)">
 <summary>
  Converts a DataTable Object to a JSON Serializable List.
 </summary>
 <param name="dt">A DataTable</param>
 <returns>List(Of Dictionary(Of String, Object)</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.GetDatePart(System.String)">
 <summary>
 Gets date part.
 </summary>
 <param name="Mode">a part name (day, year,mont).</param>
 <returns>System.DateTime.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.ProcessOrderBy(System.String@)">
 <summary>
 Processes the order by sentence from a SQL sentence.
 </summary>
 <param name="SQLSentence">The SQL sentence.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.RemoveOrderBy(System.String)">
 <summary>
 Removes order by from a SQL sentence.
 </summary>
 <param name="SQLSentence">The SQL sentence.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.BuildCount(System.String)">
 <summary>
 Builds a count sentence.
 </summary>
 <param name="SQLSentence">The SQL Sentence.</param>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">ex.Message</exception>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.addOrderBy(System.String,System.String)">
 <summary>
 adds order by sentence to SQL string.
 </summary>
 <param name="aSql">a SQL sentence.</param>
 <param name="OrderBy">The order by.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.appendOrderBy(System.String,System.String)">
 <summary>
 appends an order by to another one.
 </summary>
 <param name="OrderBy1">Orderby 1 string.</param>
 <param name="OrderBy2">Orderby 2 string.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.ProcessOrderBy(System.String@,System.String)">
 <summary>
 Processes the order by from aSQL and returns the order by with the table name.
 </summary>
 <param name="SQLSentence">The SQL sentence.</param>
 <param name="aTableName">Table Name.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.Permissions(System.String,System.String,System.String)">
 <summary>
 Checks for the permissions for running a process.
 </summary>
 <param name="aString">Permission string.</param>
 <param name="aUser">a user.</param>
 <param name="aGroup">a group.</param>
 <returns><c>true</c> if has permissions, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.GetFrom(System.String)">
 <summary>
 Gets the Table name from SQL Sentence.
 </summary>
 <param name="aSql">A SQL Sentence.</param>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.GetAlias(System.String,System.String)">
 <summary>
 Gets the alias for a field name in as SQL sentence.
 </summary>
 <param name="SqlSentence">The SQL sentence.</param>
 <param name="FieldName">Name of the field.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.AddWhere(System.String,System.String,System.Boolean)">
 <summary>
 Adds a where sentence to a SQL sentence.
 </summary>
 <param name="aSql">A SQL.</param>
 <param name="aWhere">A where.</param>
 <param name="aAnd">Use and sentence</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities._addWhere(System.String,System.String,System.Boolean)">
 <summary>
 Adds a Where to an existing sql sentence
 </summary>
 <param name="aSql">A SQL.</param>
 <param name="aWhere">A where.</param>
 <param name="aAnd">Add an And sentence</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.FormatField(System.Object,System.Byte,System.Boolean,System.Boolean)">
 <summary>
 Formats the field depending on its TypeCode
 </summary>
 <param name="aValue">A value.</param>
 <param name="aDBType">Type of a database.</param>
 <param name="aEscapeQuotes">if set to <c>true</c> the escape quotes.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.FormatField(System.Type,System.Object,System.Byte,System.Boolean,System.Boolean,System.String)">
 <summary>
 Formats the field depending on its TypeCode
 </summary>
 <param name="aType">A type.</param>
 <param name="aValue">A value.</param>
 <param name="aDBType">Type of a database.</param>
 <param name="aEscapeQuotes">if set to <c>true</c> the escape quotes.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.FormatField(System.Data.SqlDbType,System.Object,System.Boolean,System.Boolean,System.String)">
 <summary>
 Formats the field depending on its SqlDbType
 </summary>
 <param name="aSQLDbType">A SQL type.</param>
 <param name="aValue">A value.</param>
 <param name="aEscapeQuotes">if set to <c>true</c> the escape quotes.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.FormatField(System.Data.DbType,System.Object,System.Boolean,System.Boolean,System.String)">
 <summary>
 Formats the field.
 </summary>
 <param name="aDbType">Type of a database.</param>
 <param name="aValue">a value.</param>
 <param name="aEscapeQuotes">if set to <c>true</c> [a escape quotes].</param>
 <param name="Nvarchar">if set to <c>true</c> [nvarchar].</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.FormatField(System.TypeCode,System.Object,System.Byte,System.Boolean,System.Boolean,System.String)">
 <summary>
 Formats the field depending on its TypeCode
 </summary>
 <param name="aTypeCode">A type code.</param>
 <param name="aValue">A value.</param>
 <param name="aDBType">Type of a database.</param>
 <param name="aEscapeQuotes">if set to <c>true</c> the escape quotes.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.FormatFieldCrystal(System.TypeCode,System.Object)">
 <summary>
 Formats the field depending on its TypeCode
 </summary>
 <param name="aTypeCode">A type code.</param>
 <param name="aValue">A value.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.AddTableToWhere(System.String,FLEXYGO.Utilities.SQL.eWhereType)">
 <summary>
 Adds the table to a where sentence.
 </summary>
 <param name="aWhere">A where.</param>
 <param name="aMode">A mode.</param>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.AddTableToWhere(System.String,System.String,FLEXYGO.Utilities.SQL.eWhereType)">
 <summary>
 Adds the table to a where sentence.
 </summary>
 <param name="aWhere">A where.</param>
 <param name="aTable">A table.</param>
 <param name="aMode">A mode.</param>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.AddTableToWhereSimple(System.String,System.String,FLEXYGO.Utilities.SQL.eWhereType)">
 <summary>
 Adds the table to a where sentence (second implementation).
 </summary>
 <param name="aWhere">A where.</param>
 <param name="aTable">A table.</param>
 <param name="aMode">A mode.</param>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.StructToWhere(System.Collections.Generic.List{FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct},System.String)">
 <summary>
 Converts a structure to a  where sentence.
 </summary>
 <param name="aArray">A array with the structure.</param>
 <param name="aSql">A SQL.</param>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">Error StructToWhere</exception>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.WhereToStruct(System.Collections.Generic.List{FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct},System.String)">
 <summary>
 Converts a where sentence to a structure.
 </summary>
 <param name="aArray">A array.</param>
 <param name="aWhere">A where.</param>
 <returns>System.Int32.</returns>
</member>
<member name="T:FLEXYGO.Utilities.SQL.SQLUtilities.WhereAnalisis">
 <summary>
 Class WhereAnalisis.
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.SQLUtilities.WhereAnalisis._where">
 <summary>
 The _where
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.WhereAnalisis.#ctor(System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Utilities.SQL.SQLUtilities.WhereAnalisis" /> class.
 </summary>
 <param name="aWhere">A where.</param>
</member>
<member name="P:FLEXYGO.Utilities.SQL.SQLUtilities.WhereAnalisis.Where">
 <summary>
 Gets or sets the where.
 </summary>
 <value>The where.</value>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.WhereAnalisis.IsSubWhere">
 <summary>
 Checks to see if there is a SubWhere
 </summary>
 <returns><c>true</c> if SubWhere exist, <c>false</c> otherwise.</returns>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.WhereAnalisis.SubQuery">
 <summary>
 Obtains SubQuery.
 </summary>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">SubQuery:  + e.Message</exception>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.WhereAnalisis.WhereSimpleSQL(System.String)">
 <summary>
 Obtains the first simple Where sentence
 </summary>
 <param name="aSql">A SQL.</param>
 <returns>System.String.</returns>
 <exception cref="T:System.Exception">WhereSimpleSQL:  + e.Message</exception>
</member>
<member name="T:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct">
 <summary>
 Class WhereStruct.
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct.Open">
 <summary>
 The open
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct.FieldName">
 <summary>
 The field name
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct.Condition">
 <summary>
 The condition
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct.Value">
 <summary>
 The value
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct.Close">
 <summary>
 The close
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct.NextOne">
 <summary>
 The next one
 </summary>
</member>
<member name="M:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Utilities.SQL.SQLUtilities.WhereStruct"/> class.
 </summary>
</member>
<member name="T:FLEXYGO.Utilities.SQL.eWhereType">
 <summary>
 Enum eWhereType enumerates where types
 </summary>
</member>
<member name="T:FLEXYGO.Utilities.SQL.eErrorLevel">
 <summary>
 Enum eErrorLevel enumerates possible Error leves
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.eErrorLevel.SYSTEM">
 <summary>
 A system error
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.eErrorLevel.APPLICATION">
 <summary>
 An application error
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.eErrorLevel.DATABASE">
 <summary>
 A database error
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.eErrorLevel.ENTITY">
 <summary>
 An entity error
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.eErrorLevel.PROCESS">
 <summary>
 A process error
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.eErrorLevel.CONTROLLER">
 <summary>
 A controller error
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.eErrorLevel.INTERF">
 <summary>
 An interface error
 </summary>
</member>
<member name="F:FLEXYGO.Utilities.SQL.eErrorLevel.SECURITY">
 <summary>
 Security
 </summary>
</member>
<member name="T:FLEXYGO.Web.Utilities">
 <summary>
 Class Utilities.
 </summary>
</member>
<member name="M:FLEXYGO.Web.Utilities.GetEncodedQueryParams(System.String)">
 <summary>
 Gets the encoded query parameters and return A named value collection.
 </summary>
 <param name="EncodedBase64params">The encoded base64params.</param>
 <returns>NameValueCollection.</returns>
</member>
<member name="M:FLEXYGO.Web.Utilities.JSEscStr(System.String)">
 <summary>
 Escape JS special characters.
 </summary>
 <param name="value">The string to escape.</param>
 <returns>escaped string.</returns>
</member>
<member name="M:FLEXYGO.Web.Utilities.JSStrToObject(System.String)">
 <summary>
 Converts defaults string to Js object.
 </summary>
 <param name="Str">The string to convert. ex. TypeId=4|name='x'</param>
 <returns>Javascript object string ex. {TypeId:4,name:'x'}</returns>
</member>
<member name="M:FLEXYGO.Web.Utilities.TemplateButtonParser(System.String)">
 <summary>
 Parse Template to add default button string.
 </summary>
 <param name="TemplateStr">The template string.</param>
 <returns>System.String.</returns>
</member>
</members>
</doc>
