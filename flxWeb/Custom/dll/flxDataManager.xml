<?xml version="1.0"?>
<doc>
<assembly>
<name>
flxDataManager
</name>
</assembly>
<members>
<member name="P:FLEXYGO.Data.OracleConnector.ParameterNamePrefix">
 <summary>
 Returns a prefix string for parameter names
 </summary>
 <returns>String</returns>
</member>
<member name="P:FLEXYGO.Data.OracleConnector.ParameterBindPrefix">
 <summary>
 Returns a string for parameter identification in SQL statement binding
 </summary>
 <returns>String</returns>
</member>
<member name="P:FLEXYGO.Data.OracleConnector.OpenQuote">
 <summary>
 Returns the open quote character for a database object
 </summary>
 <returns>String.</returns>
</member>
<member name="P:FLEXYGO.Data.OracleConnector.CloseQuote">
 <summary>
 Returns the close quote character for a database object
 </summary>
 <returns>String.</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetDbCommand">
 <summary>
 Returns a standard DbCommand
 </summary>
 <returns>System.Data.DbCommand.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetDbCommand(System.String,System.Data.Common.DbConnection)">
 <summary>
 Returns a standard DbCommand
 </summary>
 <param name="sentence">SQL Senentece for the command</param>
 <param name="connection">Connection for the command</param>
 <returns>System.Data.DbCommand.</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetDbAdapter(System.String,System.Data.Common.DbConnection)">
 <summary>
 Returns a standard DbDataAdapter
 </summary>
 <param name="sentence">SQL Senentece for the adapter</param>
 <param name="connection">Connection for the adapter</param>
 <returns>System.Data.DbDataAdapter.</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetDbConnection(System.String)">
 <summary>
 Returns a standard DbConnection
 </summary>
 <returns>System.Data.DbConnection.</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetStandardDbType(System.Int32)">
 <summary>
 Returns a standar dbtype
 </summary>
 <param name="customParamType">Provider data type</param>
 <returns>DBType</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.InsertRowAndReturnIdentity(FLEXYGO.Data.DataManager,System.String,System.String)">
 <summary>
 Inserts a row in the database and returns the identity value for that row
 </summary>
 <param name="dm">Datamanager to execute te query</param>
 <param name="tableName">Name of the table</param>
 <param name="sql">SQL Sentence to insert</param>
 <returns>Integer</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetTableDefaults(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Returns a DataTable with a table field's defaults.
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="TableName">Table Name</param>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetObjectSchema(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Returns A datatable with table or view schema info
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="objectName">String</param>
 <returns>DataTAble</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.ConvertFunctionString(System.String,System.String)">
 <summary>
 Returns a string with a convert function for each database type
 </summary>
 <param name="datatype">Destination type.</param>
 <param name="datafield">Value to convert.</param>
 <returns>String</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.IsSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once select statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.IsMultiSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only select statements
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.IsInsert(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once insert statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.IsUpdate(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once update statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.IsDelete(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once delete statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.TestSql(FLEXYGO.Data.DataManager,System.String,System.Data.DataTable@,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Tests a SQL sentence
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="dt">Optional. Use for retrieving data schema in empty data table</param>
 <param name="params">Optional. Params for parsing SQL string</param>
 <returns>True if the sql is right else returns false and put the error in last exception.</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetStoredResult(System.Data.Common.DbCommand)">
 <summary>
 Returns if a stored has executed with success or has failed
 </summary>
 <param name="cmd">DbCommand of the stored procedure</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetPaginatedSql(System.String,System.Int32,System.Int32)">
 <summary>
 Prepares a SQL statement to execute paginated
 </summary>
 <param name="SQLSentence">The SqlSentence sentence.</param>
 <param name="FromRowNumber">From row number.</param>
 <param name="ToRowNumber">To row number.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.DropTable(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Deletes a table in the current database
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="tableName">name of the table</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetDbParameter">
 <summary>
 Returns a standard DbParameter
 </summary>
 <returns>System.Data.DbParameter.</returns>
</member>
<member name="M:FLEXYGO.Data.OracleConnector.GetDbParameter(System.String,System.Data.DbType,System.Int32)">
 <summary>
 Returns a standard DbParameter
 </summary>
 <param name="paramName">Parameter name</param>
 <param name="paramType">Parameter type</param>
 <param name="size">Parameter size</param>
 <returns>System.Data.DbParameter.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetDbConnection(System.String)">
 <summary>
 Returns a standard DbConnection
 </summary>
 <returns>System.Data.DbConnection.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetDbCommand">
 <summary>
 Returns a standard DbCommand
 </summary>
 <returns>System.Data.DbCommand.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetDbCommand(System.String,System.Data.Common.DbConnection)">
 <summary>
 Returns a standard DbCommand
 </summary>
 <param name="sentence">SQL Senentece for the command</param>
 <param name="connection">Connection for the command</param>
 <returns>System.Data.DbCommand.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetDbDataAdapter(System.String,System.Data.Common.DbConnection)">
 <summary>
 Returns a standard DbDataAdapter
 </summary>
 <param name="sentence">SQL Senentece for the adapter</param>
 <param name="connection">Connection for the adapter</param>
 <returns>System.Data.DbDataAdapter.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetDbParameter">
 <summary>
 Returns a standard DbParameter
 </summary>
 <returns>System.Data.DbParameter.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetDbParameter(System.String,System.Data.DbType,System.Int32)">
 <summary>
 Returns a standard DbParameter
 </summary>
 <param name="paramName">Parameter name</param>
 <param name="paramType">Parameter type</param>
 <param name="size">Parameter size</param>
 <returns>System.Data.DbParameter.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetStandardDbType(System.Int32)">
 <summary>
 Returns a standar dbtype
 </summary>
 <param name="customParamType">Provider data type</param>
 <returns>DBType</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetTableDefaults(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Returns a DataTable with a table field's defaults.
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="TableName">Table Name</param>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetObjectSchema(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Returns A datatable with table or view schema info
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="objectName">String</param>
 <returns>DataTAble</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.InsertRowAndReturnIdentity(FLEXYGO.Data.DataManager,System.String,System.String)">
 <summary>
 Inserts a row in the database and returns the identity value for that row
 </summary>
 <param name="dm">Datamanager to execute te query</param>
 <param name="tableName">Name of the table</param>
 <param name="sql">SQL Sentence to insert</param>
 <returns>Integer</returns>
</member>
<member name="P:FLEXYGO.Data.IDataManagerConnector.ParameterNamePrefix">
 <summary>
 Returns a prefix string for parameter names
 </summary>
 <returns>String</returns>
</member>
<member name="P:FLEXYGO.Data.IDataManagerConnector.ParameterBindPrefix">
 <summary>
 Returns a string for parameter identification in SQL statement binding
 </summary>
 <returns>String</returns>
</member>
<member name="P:FLEXYGO.Data.IDataManagerConnector.OpenQuote">
 <summary>
 Returns the open quote character for a database object
 </summary>
 <returns>String.</returns>
</member>
<member name="P:FLEXYGO.Data.IDataManagerConnector.CloseQuote">
 <summary>
 Returns the close quote character for a database object
 </summary>
 <returns>String.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.ConvertFunctionString(System.String,System.String)">
 <summary>
 Returns a string with a convert function for each database type
 </summary>
 <param name="datatype">Destination type.</param>
 <param name="datafield">Value to convert.</param>
 <returns>DataView.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.IsSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once select statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.IsMultiSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only select statements
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.IsInsert(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once insert statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.IsUpdate(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once update statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.IsDelete(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once delete statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.TestSql(FLEXYGO.Data.DataManager,System.String,System.Data.DataTable@,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Tests a SQL sentence
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="dt">Optional. Use for retrieving data schema in empty data table</param>
 <param name="params">Optional. Params for parsing SQL string</param>
 <returns>True if the sql is right else returns false and put the error in last exception.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.DeriveParameters(System.Data.Common.DbCommand)">
 <summary>
 Derives stored procedure parameters
 </summary>
 <param name="cmd">DbCommand to derive parameters</param>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetStoredResult(System.Data.Common.DbCommand)">
 <summary>
 Returns if a stored has executed with success or has failed
 </summary>
 <param name="cmd">DbCommand of the stored procedure</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.GetPaginatedSql(System.String,System.Int32,System.Int32)">
 <summary>
 Prepares a SQL statement to execute paginated
 </summary>
 <param name="SQLSentence">The SqlSentence sentence.</param>
 <param name="FromRowNumber">From row number.</param>
 <param name="ToRowNumber">To row number.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Data.IDataManagerConnector.DropTable(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Deletes a table in the current database
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="tableName">name of the table</param>
 <returns>Boolean</returns>
</member>
<member name="T:FLEXYGO.Data.eDBAction">
 <summary>
 Enum eDBAction enumerates possible Actions on DataBase
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBAction.OTHER">
 <summary>
 Other type of actions
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBAction.READ">
 <summary>
 The read
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBAction.INSERT">
 <summary>
 The insert
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBAction.UPDATE">
 <summary>
 The update
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBAction.DELETE">
 <summary>
 The delete
 </summary>
</member>
<member name="T:FLEXYGO.Data.DataManager">
 <summary>
 Class DataManager. Main Class for processing all database instructions
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._DBType">
 <summary>
 The Database type
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._ConnectString">
 <summary>
 The connection string
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._DataAdapter">
 <summary>
 The data adapter
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._FillSchema">
 <summary>
 The fill schema
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._InTrans">
 <summary>
 The _ in trans
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._Trans">
 <summary>
 The _ trans
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._Con">
 <summary>
 The _ con
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._Timeout">
 <summary>
 The _ timeout
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._KeepOpen">
 <summary>
 The _ keep open
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._SQLInstructions">
 <summary>
 The _ SQL instructions
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._LastException">
 <summary>
 The last captured exception
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager.ErrorMessage">
 <summary>
 The error message
 </summary>
</member>
<member name="F:FLEXYGO.Data.DataManager._connector">
 <summary>
 The error message
 </summary>
</member>
<member name="M:FLEXYGO.Data.DataManager.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.DataManager"/> class.
 </summary>
</member>
<member name="M:FLEXYGO.Data.DataManager.#ctor(System.String,System.Boolean,System.Collections.ArrayList)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.DataManager"/> class. Use Only for ObjectSettings
 </summary>
 <param name="ConnectionName">A connection Name to read from App Settings.</param>
 <param name="aKeepOpen">if set to <c>true</c> will maintain de connection open.</param>
 <param name="SqlSentenceInstructions">An array list of sql sentences</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.#ctor(FLEXYGO.Data.UserConnection)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.DataManager"/> class.
 </summary>
 <param name="UserConnection">A UserConnection.</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.#ctor(System.String,FLEXYGO.Data.eDBType,System.Boolean,System.Collections.ArrayList)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.DataManager"/> class.
 </summary>
 <param name="aConnectString">A connection string.</param>
 <param name="aDBType">Type of database.</param>
 <param name="aKeepOpen">if set to <c>true</c> will maintain de connection open.</param>
 <param name="SqlSentenceInstructions">A SQL instructions.</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.#ctor(System.String,FLEXYGO.Data.eDBType)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.DataManager"/> class.
 </summary>
 <param name="aConnectString">A connection string.</param>
 <param name="aDBType">Type of database.</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.#ctor(System.String,FLEXYGO.Data.eDBType,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.DataManager"/> class.
 </summary>
 <param name="aConnectString">A connection string.</param>
 <param name="aDBType">Type of database.</param>
 <param name="aTimeout">A timeout.</param>
</member>
<member name="P:FLEXYGO.Data.DataManager.ConnectString">
 <summary>
 Gets or sets the connection string.
 </summary>
 <value>The connection string.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.Type">
 <summary>
 Gets or sets the Database type.
 </summary>
 <value>The eDBType.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.KeepOpen">
 <summary>
 Gets or sets a value indicating whether to keep the connection open or not.
 </summary>
 <value><c>true</c> if [keep open]; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.Timeout">
 <summary>
 Gets or sets the timeout.
 </summary>
 <value>The timeout.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.CurrentDataAdapter">
 <summary>
 Gets the current data adapter.
 </summary>
 <value>The current data adapter.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.LastException">
 <summary>
 Gets the last exception.
 </summary>
 <value>The last error.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.FillSchema">
 <summary>
 Gets or sets a value indicating whether fill schema is set to true.
 </summary>
 <value><c>true</c> if [fill schema]; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.SQLInstructions">
 <summary>
 Gets or sets the SQL instructions.
 </summary>
 <value>The SQL instructions.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.InTrans">
 <summary>
 Gets a value indicating whether we are in a transaction or not.
 </summary>
 <value><c>true</c> if in transaction; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.DataManager.Trans">
 <summary>
 Gets the current transaction.
 </summary>
 <value>The transaction.</value>
</member>
<member name="M:FLEXYGO.Data.DataManager.CreateTable(System.String,FLEXYGO.Data.FieldSettingsCollection)">
 <summary>
 Creates a table in the current database
 </summary>
 <param name="tableName">name of the table</param>
 <param name="fields">List of info fields</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DropTable(System.String)">
 <summary>
 Deletes a table in the current database
 </summary>
 <param name="tableName">name of the table</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.InsertRowAndReturnIdentity(System.String,System.String)">
 <summary>
 Insertas a row in the database and returns the identity value for that row
 </summary>
 <param name="tableName">Name of the table</param>
 <param name="sql">SQL Sentence to insert</param>
 <returns>Integer</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.AddColumnToTable(FLEXYGO.Data.FieldSettings)">
 <summary>
 ACreates a table in the current database
 </summary>
 <param name="field">Field to add</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.GetDBType(System.String)">
 <summary>
 Returns Database Type depending on provider name.
 </summary>
 <param name="ProviderName">Provider name.</param>
 <returns>eDBType.</returns>
</member>
<member name="P:FLEXYGO.Data.DataManager.OpenQuote">
 <summary>
 Returns the open quote character for each database type
 </summary>
 <returns>String.</returns>
</member>
<member name="P:FLEXYGO.Data.DataManager.CloseQuote">
 <summary>
 Returns the close quote character for each database type
 </summary>
 <returns>String.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.QuoteName(System.String)">
 <summary>
 Returns a quoted field name
 </summary>
 <returns>String.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.QuoteName(System.String,System.String)">
 <summary>
 Returns a quoted string with table and field name
 </summary>
 <returns>String.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ConvertFunctionString(System.String,System.String)">
 <summary>
 Returns a string with a convert function for each database type
 </summary>
 <param name="datatype">Destination type.</param>
 <param name="datafield">Value to convert.</param>
 <returns>String</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.Close">
 <summary>
 Closes the connection.
 </summary>
</member>
<member name="M:FLEXYGO.Data.DataManager.GetTableDefaults(System.String)">
 <summary>
 Returns A table with field Defaults.
 </summary>
 <param name="TableName">Table Name</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.GetStandardDbType(System.Int32)">
 <summary>
 Returns a standar dbtype
 </summary>
 <param name="customParamType">Provider data type</param>
 <returns>DBType</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.GetObjectSchema(System.String)">
 <summary>
 Returns A datatable with table or view schema info
 </summary>
 <param name="objectName">String</param>
 <returns>DataTAble</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.canConnect">
 <summary>
 Determines whether this instance can connect.
 </summary>
 <returns><c>true</c> if this instance can connect; otherwise, <c>false</c>.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ChangePassword(System.String)">
 <summary>
 Changes SQL user connected password.
 </summary>
 <param name="newPassword">The new password.</param>
 <returns><c>true</c> if Changed, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.BeginTrans">
 <summary>
 Begins a transaction.
 </summary>
 <exception cref="T:System.Exception">
 Error if already open.
 or
 e.Message
 </exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.RollbackTrans">
 <summary>
 Rollbacks the transaction.
 </summary>
 <exception cref="T:System.Exception">
 Error if there is no existing transaction.
 or
 e.Message
 </exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.CommitTrans">
 <summary>
 Commits the transaction.
 </summary>
 <exception cref="T:System.Exception">
 Error if there is no existing transaction.
 or
 e.Message
 </exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataAdapter(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Obtains a Data Adapter.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DbDataAdapter.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataReader(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Obtains a Data Reader.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DbDataReader.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataReader(System.String,System.Data.CommandBehavior)">
 <summary>
 Obtains a Data Reader.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aBehavior">Command behavior.</param>
 <returns>DbDataReader.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.XmlReader(System.String)">
 <summary>
 Obtains a XML Reader based on a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL.</param>
 <returns>XmlReader.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.Command(System.String)">
 <summary>
 Executes a Command based on a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <returns>DbCommand.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataSet(System.String)">
 <summary>
 Obtains a Data Set based on a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataSet(System.String,System.String)">
 <summary>
 Obtains a specific table form a Data Set based on a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="aTableName">Name of a table.</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataSet(System.Data.DataSet,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Loads a Dataset with a Data Set based on a SQL sentence.
 </summary>
 <param name="aDataSet">A default dataset to load.</param>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataSet(System.Data.DataSet,System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Loads a Dataset with a Table Data Set based on a SQL sentence.
 </summary>
 <param name="aDataSet">A default dataset to load.</param>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aTableName">Name of a table.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataSet(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Retrieves a dataset Based on a SQL sentence given a start page and an end page.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aStartPage">Start Page.</param>
 <param name="aPageSize">Page Size.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataSet(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Retrieves a dataset Based on a SQL sentence given a start page and an end page and a Table Name.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aTableName">Table Name.</param>
 <param name="aStartPage">Start Page.</param>
 <param name="aPageSize">Page Size.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataSet(System.Data.DataSet,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Fills an existing dataset with a dataset Based on a SQL sentence given a start page and an end page.
 </summary>
 <param name="aDataset">A DataSet.</param>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aStartPage">Start Page.</param>
 <param name="aPageSize">Page Size.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataSet(System.Data.DataSet,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Fills an existing dataset with a dataset Based on a SQL sentence given a start page and an end page and a Table Name.
 </summary>
 <param name="aDataset">A DataSet.</param>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aTableName">Table Name.</param>
 <param name="aStartPage">Start Page.</param>
 <param name="aPageSize">Page Size.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Obtains a DataTable based on a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataTable.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataTable(System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Obtains a DataTable based on a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="aTableName">Name of a table.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataTable.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataTable(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Obtains a DataTable based on a SQL sentence given a start page and a page size.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="aStartPage">A start page.</param>
 <param name="aPageSize">Size of a page.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataTable.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataTable(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Obtains a DataTable based on a SQL sentence given a start page and a page size.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="aTableName">Name of a table.</param>
 <param name="aStartPage">A start page.</param>
 <param name="aPageSize">Size of a page.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataTable.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.DataTableColumnsExtendedProperties(System.String,System.String)">
 <summary>
 Obtains a DataTable Columns Extended properties.
 </summary>
 <param name="TableName">Table name</param>
 <param name="ExtendedProperty">Optional ExtendedPropertyName</param>
 <returns>DataTable.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.Stored(System.String)">
 <summary>
 Executes a stored procedure.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <returns>DbCommand.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.Stored(System.String,System.Boolean@)">
 <summary>
 Executes a stored procedure.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aExists">Captures a exists flag</param>
 <returns>DbCommand.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.GetValue(System.String,System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Gets the value returned by a SQl sentence for a given field name.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aFieldName">Name of a field.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>System.Object.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.GetValue(System.String,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Gets the value returned by a SQl sentence for a given field index.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aFieldOrder">Filed order.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>System.Object.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.GetValue(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Gets the value of the first column after running the SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>System.Object.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteSQLInstruction(System.String)">
 <summary>
 Executes the SQL instruction.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteSQLInstruction(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Executes the SQL instruction.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.IsSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once select statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.IsMultiSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only select statements
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.IsInsert(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once insert statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.IsUpdate(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once update statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.IsDelete(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once delete statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.TestSql(System.String,System.Data.DataTable@,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Test the SQL.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="dt">Optional. Use for retrieving data schema in empty data table</param>
 <param name="params">Optional. Params used for parsing sql string</param>
 <returns>True if the sql is right else returns false and put the error in last exception.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteSql(System.String)">
 <summary>
 Executes the SQL.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <returns>System.Int32.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteSql(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Executes the SQL.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>System.Int32.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteSqlWithError(System.String)">
 <summary>
 Executes the SQL with exception error.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <returns>System.Int32.</returns>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteSqlWithError(System.Collections.Specialized.StringCollection)">
 <summary>
 Executes the SQL with error.
 </summary>
 <param name="SqlSentenceCol">A SQL string collection.</param>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteERPStored(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Boolean@)">
 <summary>
 Executes an Ahora Freeware stored procedure passing parameters by order an not by name.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A BaseCollection with the stored procedure parameters.</param>
 <param name="aExists">A boolean indicating if the stored existed or not.</param>
 <returns><c>true</c> if worked, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteStored(System.String,FLEXYGO.Utilities.General.BaseCollection)">
 <summary>
 Executes the stored procedure.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A BaseCollection with the stored procedure parameters.</param>
 <returns><c>true</c> if worked, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteGipeStored(System.String,FLEXYGO.Utilities.General.BaseCollection)">
 <summary>
 Executes A gipe stored procedure.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A BaseCollection with the stored procedure parameters.</param>
 <returns><c>true</c> if worked, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteStored(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Boolean@)">
 <summary>
 Executes the stored procedure and retrieves if existed or not.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A BaseCollection with the stored procedure parameters.</param>
 <param name="aExists">A boolean indicating if the stored existed or not.</param>
 <returns><c>true</c> if executed ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteStoredResult(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Data.DataTable@)">
 <summary>
 Executes the stored procedure ans puts results in a data table.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A BaseCollection of parameters.</param>
 <param name="aResult">A dataTable to put the results in.</param>
 <returns><c>true</c> if worked ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteStoredResult(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Data.DataSet@,System.String)">
 <summary>
 Executes the stored procedure ans puts results in a DataSet.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A BaseCollection of parameters.</param>
 <param name="aResult">A DataSet to put the results in.</param>
 <param name="TableNames">List of table names separated with ",".</param>
 <returns><c>true</c> if worked ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteStoredResult(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Data.DataTable@,System.Boolean@)">
 <summary>
 Executes the stored procedure ans puts results in a data table.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A BaseCollection of parameters.</param>
 <param name="aResult">A dataTable to put the results in.</param>
 <param name="aExists">A boolean indicating if the stored existed or not.</param>
 <returns><c>true</c> if worked ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ExecuteStoredResult(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Data.DataSet@,System.String,System.Boolean@)">
 <summary>
 Executes the stored procedure ans puts results in a DataSet.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A BaseCollection of parameters.</param>
 <param name="aResult">A DataSet to put the results in.</param>
 <param name="TableNames">List of table names separated with ",".</param>
 <param name="aExists">A boolean indicating if the stored existed or not.</param>
 <returns><c>true</c> if worked ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ProcessError(System.Exception)">
 <summary>
 Processes the SQL error for better understanding.
 </summary>
 <param name="e">The original exception</param>
 <returns>System.Exception.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.RecordCount(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Counts the number or resulting records.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <returns>System.Int32.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.Stored_GetInputParams(System.Data.Common.DbCommand,FLEXYGO.Utilities.General.BaseCollection@)">
 <summary>
 Retrieves Stored Procedure input parameters.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">An array list of stored params.</param>
 <returns><c>true</c> if parameters where retrieved, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.Stored_GetInputParams(System.String,FLEXYGO.Utilities.General.BaseCollection@)">
 <summary>
 Retrieves Stored Procedure input parameters.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">An array list of stored params.</param>
 <returns><c>true</c> if parameters where retrieved, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.SetConnector">
 <summary>
 Establishes the connector
 </summary>
</member>
<member name="M:FLEXYGO.Data.DataManager.doGetStored(System.String,System.Boolean@)">
 <summary>
 Executes SQL sentence as a Stored.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aExists">Determines if the stored procedure exits or not.</param>
 <returns>DbCommand.</returns>
 <exception cref="T:System.Exception">
 Stored does not exist
 or
 e.Message
 </exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.doGetCommand(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Executes a SQL command.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="params"> a List of DbParameters</param>
 <returns>DbCommand.</returns>
 <exception cref="T:System.Exception">Error creating Command.  + e.Message</exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.doGetDataReader(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
Obtains a Data reader based on a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DbDataReader.</returns>
 <exception cref="T:System.Exception">
 </exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.doGetDataReader(System.String,System.Data.CommandBehavior)">
 <summary>
Obtains a Data reader based on a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="aBehavior">Data reader behavior.</param>
 <returns>DbDataReader.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.doProcessError(System.Exception)">
 <summary>
 Processes the SQL error for better understanding.
 </summary>
 <param name="e">The original exception.</param>
 <returns>System.Exception.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.doGetDataAdapter(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Implements a Data Adapter.
 </summary>
 <param name="SqlSentence">A SQL.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DbDataAdapter.</returns>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.doStored_GetParams(System.Data.Common.DbCommand,FLEXYGO.Utilities.General.BaseCollection,System.Boolean)">
 <summary>
 Retrieves Stored Procedure parameters.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">An array list of stored params.</param>
 <returns><c>true</c> if parameters where retrieved, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.doStored_GetInputParams(System.Data.Common.DbCommand,FLEXYGO.Utilities.General.BaseCollection)">
 <summary>
 Retrieves Stored Procedure input parameters.
 </summary>
 <param name="aStored">A stored procedure command.</param>
 <param name="aList">An array list of stored params.</param>
 <returns><c>true</c> if parameters where retrieved, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.doStored_SetParams(System.Data.Common.DbCommand,FLEXYGO.Utilities.General.BaseCollection,System.Boolean)">
 <summary>
 Sets parameters for executing a Stored procedure.
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A list of stored parameters.</param>
 <param name="byName">Defines if params are past by name or by position</param>
 <returns><c>true</c> if executed, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.doGetConnection(System.Boolean)">
 <summary>
 Establishes a connection .
 </summary>
 <param name="aOpen">if set to <c>true</c> connection will remain open.</param>
 <returns>DbConnection.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._dataTable(System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Obtains a data Table for the specified SQL Sentence from a given start page and with a page size.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="aTableName">Name of a table.</param>
 <param name="aStartPage">Starting page.</param>
 <param name="aPageSize">Page Size.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>DataTable.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._dataTableExtendedProperties(System.String,System.String)">
 <summary>
 Obtains data Table Columns Extended Properties.
 </summary>
 <param name="aTableName">Name of a table.</param>
 <param name="ExtendedPropertyName">Optional extended property name.</param>
 <returns>DataTable.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._dataset(System.Data.DataSet,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Fills the given DataSet with the data from a table of the resulting from a SQL sentence.
 </summary>
 <param name="aDataSet">A data set.</param>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="aTableName">A table name.</param>
 <param name="aStartPage">A start page.</param>
 <param name="aPageSize">A page size.</param>
 <param name="originalParams">Params collection for parametrized queries</param>
 <returns>DataSet.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.ProcessStringParams(System.String@,System.Collections.Generic.List{System.Data.Common.DbParameter}@)">
 <summary>
 Transforms string sql parameters into array parsing the sql sentence.
 </summary>
 <param name="SQLSentence">The Sql Sentence sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
</member>
<member name="M:FLEXYGO.Data.DataManager._prepareSQLLimitOffset(System.String,System.Int32,System.Int32)">
 <summary>
 Prepares the SQL page using limit/offset functions.
 </summary>
 <param name="SQLSentence">The SqlSentence sentence.</param>
 <param name="FromRowNumber">From row number.</param>
 <param name="ToRowNumber">To row number.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._prepareSQLRowNumber(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Prepares the SQL row number.
 </summary>
 <param name="SQLSentence">The SqlSentence sentence.</param>
 <param name="FromRowNumber">From row number.</param>
 <param name="ToRowNumber">To row number.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._FieldExists(System.Data.DataSet,System.String)">
 <summary>
 Checks to see if the field exists.
 </summary>
 <param name="DatSet">The Dataset</param>
 <param name="ColumnName">The Column Name.</param>
 <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._execute_stored(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Boolean,System.Boolean@)">
 <summary>
 Executes specified Stored Procedure
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A list of parameters.</param>
 <param name="ParamsByName">if parameter are passed by name or by order</param>
 <param name="aExists">a stored exists flag.</param>
 <returns>System.Object.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._execute_stored_result(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Data.DataTable@,System.Boolean)">
 <summary>
 Executes specified Stored Procedure
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A list of parameters.</param>
 <param name="aResult">DataTable with the results</param>
 <param name="ParamsByName">if parameter are passed by name or by order</param>
 <returns><c>true</c> if executed ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._execute_stored_result(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Data.DataTable@,System.Boolean,System.Boolean@)">
 <summary>
 Executes specified Stored Procedure
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A list of parameters.</param>
 <param name="aResult">DataTable with the results</param>
 <param name="ParamsByName">if parameter are passed by name or by order</param>
 <param name="aExists">a stored exists flag.</param>
 <returns><c>true</c> if executed ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._execute_stored_result(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Data.DataSet@,System.String,System.Boolean)">
 <summary>
 Executes specified Stored Procedure
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A list of parameters.</param>
 <param name="aResult">DataSet with the results</param>
 <param name="TableNames">A list of table names separated with ","</param>
 <param name="ParamsByName">if parameter are passed by name or by order</param>
 <returns><c>true</c> if executed ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._execute_stored_result(System.String,FLEXYGO.Utilities.General.BaseCollection,System.Data.DataSet@,System.String,System.Boolean,System.Boolean)">
 <summary>
 Executes specified Stored Procedure
 </summary>
 <param name="aStored">A stored procedure name.</param>
 <param name="aList">A list of parameters.</param>
 <param name="aResult">DataSet with the results</param>
 <param name="TableNames">A list of table names separated with ","</param>
 <param name="ParamsByName">if parameter are passed by name or by order</param>
 <param name="aExists">a stored exists flag.</param>
 <returns><c>true</c> if executed ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager._connection(System.Boolean)">
 <summary>
 Establishes and opens a connection.
 </summary>
 <param name="aOpen">if set to <c>true</c> will open the connection.</param>
 <returns>SqlClient.SqlConnection.</returns>
 <exception cref="T:System.Exception">e.Message</exception>
</member>
<member name="M:FLEXYGO.Data.DataManager._parameter_copy(System.Data.Common.DbParameter)">
 <summary>
 Copies a SQl parameter into a new instance.
 </summary>
 <param name="aParam">A SQL parameter.</param>
 <returns>dbParameter</returns>
</member>
<member name="M:FLEXYGO.Data.DataManager.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
 <summary>
 Handles the <see cref="E:InfoMessage" /> event.
 </summary>
 <param name="sender">The sender.</param>
 <param name="args">The <see cref="T:System.Data.SqlClient.SqlInfoMessageEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.OnInfoMessageMySql(System.Object,MySql.Data.MySqlClient.MySqlInfoMessageEventArgs)">
 <summary>
 Handles the <see cref="E:InfoMessage" /> event.
 </summary>
 <param name="sender">The sender.</param>
 <param name="args">The <see cref="T:System.Data.SqlClient.SqlInfoMessageEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.OnInfoMessageOracle(System.Object,Oracle.ManagedDataAccess.Client.OracleInfoMessageEventArgs)">
 <summary>
 Handles the <see cref="E:InfoMessage" /> event.
 </summary>
 <param name="sender">The sender.</param>
 <param name="args">The <see cref="T:System.Data.SqlClient.SqlInfoMessageEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.OnStateChange(System.Object,System.Data.StateChangeEventArgs)">
 <summary>
 Handles the <see cref="E:StateChange" /> event.
 </summary>
 <param name="SqlSentenceConnection">The SQlConnection.</param>
 <param name="args">The <see cref="T:System.Data.StateChangeEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:FLEXYGO.Data.DataManager.doRecordCount(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Counts the number of Records returned by a SQL sentence.
 </summary>
 <param name="SqlSentence">A SQL sentence.</param>
 <param name="params">Params collection for parametrized queries</param>
 <returns>System.Int32.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.doGetStoredResult(System.Data.Common.DbCommand)">
 <summary>
 Returns stored procedure results.
 </summary>
 <param name="aCommand">A command.</param>
 <returns>System.Data.DataTable.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.doGetStoredResult(System.Data.Common.DbCommand,System.String)">
 <summary>
 Returns stored procedure results.
 </summary>
 <param name="aCommand">A command.</param>
 <returns>System.Data.DataSet.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.DataManager.DeriveParameters(System.String)">
 <summary>
 Derives stored procedure parameters
 </summary>
 <param name="StoredName">Name of the stored procedure</param>
 <returns>DbCommand</returns>
</member>
<member name="T:FLEXYGO.Data.StoredParamCollection">
 <summary>
 Class StoredParamCollection.
 </summary>
 <seealso cref="T:FLEXYGO.Utilities.General.ClassCollection`1" />
 <seealso cref="T:System.Xml.Serialization.IXmlSerializable" />
</member>
<member name="F:FLEXYGO.Data.StoredParamCollection.rowId">
 <summary>
 The row identifier
 </summary>
</member>
<member name="F:FLEXYGO.Data.StoredParamCollection.ObjectName">
 <summary>
 The object name
 </summary>
</member>
<member name="M:FLEXYGO.Data.StoredParamCollection.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.StoredParamCollection"/> class.
 </summary>
 <param name="RowIdentifier">The row identifier.</param>
 <param name="Name">The name.</param>
</member>
<member name="M:FLEXYGO.Data.StoredParamCollection.#ctor">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.StoredParamCollection"/> class.
 </summary>
</member>
<member name="M:FLEXYGO.Data.StoredParamCollection.GetSchema">
 <summary>
 This method is reserved and should not be used. When implementing the <see langword="IXmlSerializable" /> interface, you should return <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
 </summary>
 <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
</member>
<member name="M:FLEXYGO.Data.StoredParamCollection.ReadXml(System.Xml.XmlReader)">
 <summary>
 Generates an object from its XML representation.
 </summary>
 <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
</member>
<member name="M:FLEXYGO.Data.StoredParamCollection.WriteXml(System.Xml.XmlWriter)">
 <summary>
 Converts an object into its XML representation.
 </summary>
 <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
</member>
<member name="M:FLEXYGO.Data.StoredParamCollection.ToXML">
 <summary>
 To the XML.
 </summary>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Data.StoredParamCollection.FromXML(System.String)">
 <summary>
 Froms the XML.
 </summary>
 <param name="XmlText">The XML text.</param>
 <returns>StoredParamCollection.</returns>
</member>
<member name="T:FLEXYGO.Data.StoredParam">
 <summary>
 Class StoredParam.
 </summary>
 <seealso cref="T:System.Xml.Serialization.IXmlSerializable" />
</member>
<member name="F:FLEXYGO.Data.StoredParam.Name">
 <summary>
 The name
 </summary>
</member>
<member name="F:FLEXYGO.Data.StoredParam.Value">
 <summary>
 The value
 </summary>
</member>
<member name="F:FLEXYGO.Data.StoredParam.OldValue">
 <summary>
 The old value
 </summary>
</member>
<member name="F:FLEXYGO.Data.StoredParam.TableName">
 <summary>
 The table name
 </summary>
</member>
<member name="F:FLEXYGO.Data.StoredParam.IsKey">
 <summary>
 The is key
 </summary>
</member>
<member name="M:FLEXYGO.Data.StoredParam.GetSchema">
 <summary>
 This method is reserved and should not be used. When implementing the <see langword="IXmlSerializable" /> interface, you should return <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
 </summary>
 <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
</member>
<member name="M:FLEXYGO.Data.StoredParam.ReadXml(System.Xml.XmlReader)">
 <summary>
 Generates an object from its XML representation.
 </summary>
 <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
</member>
<member name="M:FLEXYGO.Data.StoredParam.WriteXml(System.Xml.XmlWriter)">
 <summary>
 Converts an object into its XML representation.
 </summary>
 <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
</member>
<member name="P:FLEXYGO.Data.MySqlConnector.ParameterNamePrefix">
 <summary>
 Returns a prefix string for parameter names
 </summary>
 <returns>String</returns>
</member>
<member name="P:FLEXYGO.Data.MySqlConnector.ParameterBindPrefix">
 <summary>
 Returns a string for parameter identification in SQL statement binding
 </summary>
 <returns>String</returns>
</member>
<member name="P:FLEXYGO.Data.MySqlConnector.OpenQuote">
 <summary>
 Returns the open quote character for a database object
 </summary>
 <returns>String.</returns>
</member>
<member name="P:FLEXYGO.Data.MySqlConnector.CloseQuote">
 <summary>
 Returns the close quote character for a database object
 </summary>
 <returns>String.</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetDbCommand">
 <summary>
 Returns a standard DbCommand
 </summary>
 <returns>System.Data.DbCommand.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetDbCommand(System.String,System.Data.Common.DbConnection)">
 <summary>
 Returns a standard DbCommand
 </summary>
 <param name="sentence">SQL Senentece for the command</param>
 <param name="connection">Connection for the command</param>
 <returns>System.Data.DbCommand.</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetDbDataAdapter(System.String,System.Data.Common.DbConnection)">
 <summary>
 Returns a standard DbDataAdapter
 </summary>
 <param name="sentence">SQL Senentece for the adapter</param>
 <param name="connection">Connection for the adapter</param>
 <returns>System.Data.DbDataAdapter.</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetDbConnection(System.String)">
 <summary>
 Returns a standard DbConnection
 </summary>
 <returns>System.Data.DbConnection.</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetStandardDbType(System.Int32)">
 <summary>
 Returns a standar dbtype
 </summary>
 <param name="customParamType">Provider data type</param>
 <returns>DBType</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.InsertRowAndReturnIdentity(FLEXYGO.Data.DataManager,System.String,System.String)">
 <summary>
 Inserts a row in the database and returns the identity value for that row
 </summary>
 <param name="dm">Datamanager to execute te query</param>
 <param name="tableName">Name of the table</param>
 <param name="sql">SQL Sentence to insert</param>
 <returns>Integer</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetTableDefaults(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Returns a DataTable with a table field's defaults.
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="TableName">Table Name</param>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetObjectSchema(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Returns A datatable with table or view schema info
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="objectName">String</param>
 <returns>DataTAble</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.ConvertFunctionString(System.String,System.String)">
 <summary>
 Returns a string with a convert function for each database type
 </summary>
 <param name="datatype">Destination type.</param>
 <param name="datafield">Value to convert.</param>
 <returns>String</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.IsSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once select statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.IsMultiSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only select statements
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.IsInsert(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once insert statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.IsUpdate(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once update statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.IsDelete(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once delete statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.TestSql(FLEXYGO.Data.DataManager,System.String,System.Data.DataTable@,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Tests a SQL sentence
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="dt">Optional. Use for retrieving data schema in empty data table</param>
 <param name="params">Optional. Params for parsing SQL string</param>
 <returns>True if the sql is right else returns false and put the error in last exception.</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetStoredResult(System.Data.Common.DbCommand)">
 <summary>
 Returns if a stored has executed with success or has failed
 </summary>
 <param name="cmd">DbCommand of the stored procedure</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetPaginatedSql(System.String,System.Int32,System.Int32)">
 <summary>
 Prepares a SQL statement to execute paginated
 </summary>
 <param name="SQLSentence">The SqlSentence sentence.</param>
 <param name="FromRowNumber">From row number.</param>
 <param name="ToRowNumber">To row number.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.DropTable(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Deletes a table in the current database
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="tableName">name of the table</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetDbParameter">
 <summary>
 Returns a standard DbParameter
 </summary>
 <returns>System.Data.DbParameter.</returns>
</member>
<member name="M:FLEXYGO.Data.MySqlConnector.GetDbParameter(System.String,System.Data.DbType,System.Int32)">
 <summary>
 Returns a standard DbParameter
 </summary>
 <param name="paramName">Parameter name</param>
 <param name="paramType">Parameter type</param>
 <param name="size">Parameter size</param>
 <returns>System.Data.DbParameter.</returns>
</member>
<member name="T:FLEXYGO.Data.FieldSettings">
 <summary>
 Class FieldSettings.
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._FieldName">
 <summary>
 The field name
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._DefaultValue">
 <summary>
 The default value
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Identity">
 <summary>
 Is identity
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Calculated">
 <summary>
 Iscalculated
 </summary>
</member>
<member name="P:FLEXYGO.Data.FieldSettings._DataTypeSQL">
 <summary>
 Get sql data type
 </summary>        
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Length">
 <summary>
 The length
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Precission">
 <summary>
 The precission
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Scale">
 <summary>
 The scale
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Key">
 <summary>
 Is a primary key
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Name">
 <summary>
 The type
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._AllowsNulls">
 <summary>
 Does it allows nulls
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Unique">
 <summary>
 Is unique
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._TableName">
 <summary>
 The table name
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._Mapped">
 <summary>
 mapped
 </summary>
</member>
<member name="F:FLEXYGO.Data.FieldSettings._MappedField">
 <summary>
 The mapped field
 </summary>
</member>
<member name="M:FLEXYGO.Data.FieldSettings.#ctor(FLEXYGO.Data.DataManager,System.String,System.Boolean,System.Boolean,System.Boolean,System.Type,System.Boolean,System.String,System.Int32,System.Boolean,System.Data.DbType,System.Int32,System.Int32)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.FieldSettings"/> class.
 </summary>
</member>
<member name="M:FLEXYGO.Data.FieldSettings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Fills <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with necesary information for serializing Object Configuration.
 </summary>
 <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> to fill with object date</param>
 <param name="context">Serialization Destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
</member>
<member name="M:FLEXYGO.Data.FieldSettings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.FieldSettings"/> class.
 </summary>
 <param name="info">The information.</param>
 <param name="context">The context.</param>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.FieldName">
 <summary>
 Gets the name of the field.
 </summary>
 <value>The name of the field.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.DefaultValue">
 <summary>
 Gets the default value.
 </summary>
 <value>The default value.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.Identity">
 <summary>
 Gets a value indicating whether this <see cref="T:FLEXYGO.Data.FieldSettings"/> is identity.
 </summary>
 <value><c>true</c> if identity; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.Calculated">
 <summary>
 Gets a value indicating whether this <see cref="T:FLEXYGO.Data.FieldSettings"/> is Calculated.
 </summary>
 <value><c>true</c> if Calculated; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.DataTypeSQL">
 <summary>
 Gets a value indicating <see cref="T:FLEXYGO.Data.FieldSettings"/> Data Provider Type.
 </summary>
 <value>SqlDbType enum</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.Key">
 <summary>
 Gets a value indicating whether this <see cref="T:FLEXYGO.Data.FieldSettings"/> is key field.
 </summary>
 <value><c>true</c> if key; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.FieldType">
 <summary>
 Gets the type of the field.
 </summary>
 <value>The type of the field.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.AllowsNulls">
 <summary>
 Gets a value indicating whether it allows nulls.
 </summary>
 <value><c>true</c> if [allows nulls]; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.Unique">
 <summary>
 Gets a value indicating whether this <see cref="T:FLEXYGO.Data.FieldSettings"/> is unique.
 </summary>
 <value><c>true</c> if unique; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.TableName">
 <summary>
 Gets the table name.
 </summary>
 <value>The table name.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.Length">
 <summary>
 Gets the length.
 </summary>
 <value>The length.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.MappedField">
 <summary>
 Gets the mapped field.
 </summary>
 <value>The mapped field.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.Mapped">
 <summary>
 Gets a value indicating whether this <see cref="T:FLEXYGO.Data.FieldSettings"/> is mapped.
 </summary>
 <value><c>true</c> if mapped; otherwise, <c>false</c>.</value>
</member>
<member name="P:FLEXYGO.Data.FieldSettings.Required">
 <summary>
 Gets a value indicating whether this <see cref="T:FLEXYGO.Data.FieldSettings"/> is required.
 </summary>
 <value><c>true</c> if required; otherwise, <c>false</c>.</value>
</member>
<member name="M:FLEXYGO.Data.FieldSettings.SetDefault(System.String)">
 <summary>
 Sets a Default Value.
 </summary>
 <param name="aValue">A value.</param>
</member>
<member name="M:FLEXYGO.Data.FieldSettings.Description">
 <summary>
 Returns a field definition script
 </summary>
 <returns>String</returns>
</member>
<member name="M:FLEXYGO.Data.FieldSettings.IdentityFieldDescriptor">
 <summary>
 Returns Field identity descriptor
 </summary>
 <returns>String</returns>
</member>
<member name="M:FLEXYGO.Data.FieldSettings.DataTypeDescriptor">
 <summary>
 Returns Field data type descriptor
 </summary>
 <returns>String</returns>
</member>
<member name="T:FLEXYGO.Data.FieldSettingsCollection">
 <summary>
 Class FieldSettingsCollection.
 </summary>
</member>
<member name="M:FLEXYGO.Data.FieldSettingsCollection.Add(FLEXYGO.Data.FieldSettings)">
 <summary>
 Adds the field Settings to the Collection using FieldName as Key.
 </summary>
 <param name="aField">A fieldSetting object.</param>
 <returns><c>true</c> if ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.FieldSettingsCollection.Remove(FLEXYGO.Data.FieldSettings)">
 <summary>
 Removes the field Settings from the Collection using FieldName as Key.
 </summary>
 <param name="aField">A fieldSetting object.</param>
 <returns><c>true</c> if ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.FieldSettingsCollection.Contains(System.String)">
 <summary>
 Checks  if FieldSettings object exists in Collection using FieldName.
 </summary>
 <param name="FieldName">The FieldName.</param>
 <returns><c>true</c> if ok, <c>false</c> otherwise.</returns>
</member>
<member name="P:FLEXYGO.Data.SqlServerConnector.ParameterNamePrefix">
 <summary>
 Returns a prefix string for parameter names
 </summary>
 <returns>String</returns>
</member>
<member name="P:FLEXYGO.Data.SqlServerConnector.ParameterBindPrefix">
 <summary>
 Returns a string for parameter identification in SQL statement binding
 </summary>
 <returns>String</returns>
</member>
<member name="P:FLEXYGO.Data.SqlServerConnector.OpenQuote">
 <summary>
 Returns the open quote character for a database object
 </summary>
 <returns>String.</returns>
</member>
<member name="P:FLEXYGO.Data.SqlServerConnector.CloseQuote">
 <summary>
 Returns the close quote character for a database object
 </summary>
 <returns>String.</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetDbCommand">
 <summary>
 Returns a standard DbCommand
 </summary>
 <returns>System.Data.DbCommand.</returns>
 <exception cref="T:System.Exception"></exception>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetDbCommand(System.String,System.Data.Common.DbConnection)">
 <summary>
 Returns a standard DbCommand
 </summary>
 <param name="sentence">SQL Senentece for the command</param>
 <param name="connection">Connection for the command</param>
 <returns>System.Data.DbCommand.</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetDbDataAdapter(System.String,System.Data.Common.DbConnection)">
 <summary>
 Returns a standard DbDataAdapter
 </summary>
 <param name="sentence">SQL Senentece for the adapter</param>
 <param name="connection">Connection for the adapter</param>
 <returns>System.Data.DbDataAdapter.</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetDbConnection(System.String)">
 <summary>
 Returns a standard DbConnection
 </summary>
 <returns>System.Data.DbConnection.</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetStandarDbType(System.Int32)">
 <summary>
 Returns a standar dbtype
 </summary>
 <param name="customParamType">Provider data type</param>
 <returns>DBType</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.InsertRowAndReturnIdentity(FLEXYGO.Data.DataManager,System.String,System.String)">
 <summary>
 Inserts a row in the database and returns the identity value for that row
 </summary>
 <param name="dm">Datamanager to execute te query</param>
 <param name="tableName">Name of the table</param>
 <param name="sql">SQL Sentence to insert</param>
 <returns>Integer</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetTableDefaults(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Returns a DataTable with a table field's defaults.
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="TableName">Table Name</param>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetDbParameter">
 <summary>
 Returns a standard DbParameter
 </summary>
 <returns>System.Data.DbParameter.</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetObjectSchema(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Returns A datatable with table or view schema info
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="objectName">String</param>
 <returns>DataTAble</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetDbParameter(System.String,System.Data.DbType,System.Int32)">
 <summary>
 Returns a standard DbParameter
 </summary>
 <param name="paramName">Parameter name</param>
 <param name="paramType">Parameter type</param>
 <param name="size">Parameter size</param>
 <returns>System.Data.DbParameter.</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.ConvertFunctionString(System.String,System.String)">
 <summary>
 Returns a string with a convert function for each database type
 </summary>
 <param name="datatype">Destination type.</param>
 <param name="datafield">Value to convert.</param>
 <returns>String</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.IsSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once select statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.IsMultiSelect(System.String,System.String@)">
 <summary>
 Returns true if sencente has only select statements
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.IsInsert(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once insert statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.IsUpdate(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once update statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.IsDelete(System.String,System.String@)">
 <summary>
 Returns true if sencente has only once delete statement
 </summary>
 <param name="sentence">SQL sentence</param>
 <param name="lerror">Error message.</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.TestSql(FLEXYGO.Data.DataManager,System.String,System.Data.DataTable@,System.Collections.Generic.List{System.Data.Common.DbParameter})">
 <summary>
 Tests a SQL sentence
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="SqlSentence">A SQL Sentence.</param>
 <param name="dt">Optional. Use for retrieving data schema in empty data table</param>
 <param name="params"> a List of DbParameters</param>
 <returns>True if the sql is right else returns false and put the error in last exception.</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetStoredResult(System.Data.Common.DbCommand)">
 <summary>
 Returns if a stored has executed with success or has failed
 </summary>
 <param name="cmd">DbCommand of the stored procedure</param>
 <returns>Boolean</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.GetPaginatedSql(System.String,System.Int32,System.Int32)">
 <summary>
 Prepares a SQL statement to execute paginated
 </summary>
 <param name="SQLSentence">The SqlSentence sentence.</param>
 <param name="FromRowNumber">From row number.</param>
 <param name="ToRowNumber">To row number.</param>
 <returns>System.String.</returns>
</member>
<member name="M:FLEXYGO.Data.SqlServerConnector.DropTable(FLEXYGO.Data.DataManager,System.String)">
 <summary>
 Deletes a table in the current database
 </summary>
 <param name="dm">Datamanager to execute the query</param>
 <param name="tableName">name of the table</param>
 <returns>Boolean</returns>
</member>
<member name="T:FLEXYGO.Data.eDBType">
 <summary>
 Enum eDBType defines Database types
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBType.SQL">
 <summary>
 SQL DataBase
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBType.OLEDB">
 <summary>
 OLEdb Connection
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBType.MYSQL">
 <summary>
 MySql Connection
 </summary>
</member>
<member name="F:FLEXYGO.Data.eDBType.ORACLE">
 <summary>
 Oracle Connection
 </summary>
</member>
<member name="T:FLEXYGO.Data.UserConnection">
 <summary>
 Class UserConnection.
 </summary>
</member>
<member name="F:FLEXYGO.Data.UserConnection._ConnStringId">
 <summary>
 The Connection String Id
 </summary>
</member>
<member name="F:FLEXYGO.Data.UserConnection._Encripted">
 <summary>
 If Encripted
 </summary>
</member>
<member name="F:FLEXYGO.Data.UserConnection._ConnString">
 <summary>
 The Connection String
 </summary>
</member>
<member name="F:FLEXYGO.Data.UserConnection._DBType">
 <summary>
 The Database Type
 </summary>
</member>
<member name="F:FLEXYGO.Data.UserConnection._SQLContext">
 <summary>
 The Instructions to run before executing a Datamanager instruction
 </summary>
</member>
<member name="M:FLEXYGO.Data.UserConnection.#ctor(System.String,System.String,FLEXYGO.Data.eDBType,System.Boolean,System.Collections.ArrayList)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.UserConnection"/> class.
 </summary>
 <param name="ConnStringId">The connection string identifier.</param>
 <param name="ConnString">The connection string.</param>
 <param name="DBType">Type of the database.</param>
 <param name="Encripted">if set to <c>true</c> the connection String should be encripted.</param>
</member>
<member name="P:FLEXYGO.Data.UserConnection.ConnString">
 <summary>
 Gets the connection string.
 </summary>
 <value>The connection string.</value>
</member>
<member name="P:FLEXYGO.Data.UserConnection.DBType">
 <summary>
 Gets the type of the database.
 </summary>
 <value>The type of the database.</value>
</member>
<member name="P:FLEXYGO.Data.UserConnection.SQLContext">
 <summary>
 Gets The Instructions to run before executing a Datamanager instruction
 </summary>
 <value>ArrayList.</value>
</member>
<member name="T:FLEXYGO.Data.UserConnectionCollection">
 <summary>
 Class UserConnectionCollection.
 </summary>
</member>
<member name="F:FLEXYGO.Data.UserConnectionCollection._ConfDataConnId">
 <summary>
 The Settings DB connection identifier
 </summary>
</member>
<member name="F:FLEXYGO.Data.UserConnectionCollection._MainDataConnId">
 <summary>
 The Main data DB connection identifier
 </summary>
</member>
<member name="M:FLEXYGO.Data.UserConnectionCollection.#ctor(FLEXYGO.Data.UserConnection,FLEXYGO.Data.UserConnection)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.UserConnectionCollection"/> class.
 </summary>
 <param name="ConfUserConn">The conf user connection.</param>
 <param name="MainDataUserConn">The main data user connection.</param>
</member>
<member name="M:FLEXYGO.Data.UserConnectionCollection.#ctor(System.String,System.String)">
 <summary>
 Initializes a new instance of the <see cref="T:FLEXYGO.Data.UserConnectionCollection"/> class.
 </summary>
 <param name="ConfUserConnName">The conf user connection string name.</param>
 <param name="MainDataUserConnName">The main data user connection string name.</param>
</member>
<member name="P:FLEXYGO.Data.UserConnectionCollection.ConfConnString">
 <summary>
 Gets the Settings connection string.
 </summary>
 <value>The Settings connection string.</value>
</member>
<member name="P:FLEXYGO.Data.UserConnectionCollection.ConfConnDbType">
 <summary>
 Gets the Settings connection string type.
 </summary>
 <value>The Settings connection string type.</value>
</member>
<member name="P:FLEXYGO.Data.UserConnectionCollection.MainDataConnString">
 <summary>
 Gets the main data connection string.
 </summary>
 <value>The main data connection string.</value>
</member>
<member name="P:FLEXYGO.Data.UserConnectionCollection.MainDataConnDbType">
 <summary>
 Gets the main data connection string type.
 </summary>
 <value>The main data connection string type.</value>
</member>
<member name="P:FLEXYGO.Data.UserConnectionCollection.ConfConnStringId">
 <summary>
 Gets the Settings connection string identifier.
 </summary>
 <value>The Settings connection string identifier.</value>
</member>
<member name="P:FLEXYGO.Data.UserConnectionCollection.MainDataConnStringId">
 <summary>
 Gets the main data connection string identifier.
 </summary>
 <value>The main data connection string identifier.</value>
</member>
<member name="M:FLEXYGO.Data.UserConnectionCollection.Add(FLEXYGO.Data.UserConnection)">
 <summary>
 Adds the UserConnection object to the Collection using ConnStringId as Key.
 </summary>
 <param name="UserConnection">UserConnection object.</param>
 <returns><c>true</c> if ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.UserConnectionCollection.Remove(FLEXYGO.Data.UserConnection)">
 <summary>
 Removes the UserConnection object from the Collection using ConnStringId as Key.
 </summary>
 <param name="UserConnection">An UserConnection object.</param>
 <returns><c>true</c> if ok, <c>false</c> otherwise.</returns>
</member>
<member name="M:FLEXYGO.Data.UserConnectionCollection.Contains(System.String)">
 <summary>
 Checks  if UserConnection Object exists in Collection using UserConnStringId.
 </summary>
 <param name="UserConnStringId">The UserConnStringId.</param>
 <returns><c>true</c> if ok, <c>false</c> otherwise.</returns>
</member>
<member name="T:FLEXYGO.My.Resources.Resources">
<summary>
  Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
</summary>
</member>
<member name="P:FLEXYGO.My.Resources.Resources.ResourceManager">
<summary>
  Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
</summary>
</member>
<member name="P:FLEXYGO.My.Resources.Resources.Culture">
<summary>
  Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
  búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
</summary>
</member>
</members>
</doc>
